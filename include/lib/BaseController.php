<?php
/**
 * Parent Controller
 *
 * Date Created: 2007-04-01
 *
 * @author Gabe Martin-Dempesy <gabe@mudbuginfo.com>
 * @version $Id: BaseController.php 3933 2009-04-28 21:16:07Z gabebug $
 * @copyright Copyright &copy; 2005 Mudbug Media
 * @package Chitin
 * @subpackage Controllers
 */

/**
 * Parent for every existing controller.
 *
 * @package Chitin
 * @subpackage Controllers
 */
class BaseController {

	public function __construct () {
		
	}

	/**
	 * @var mixed Associative Array containing elements used by the layout.
	 *
	 * Recommended names for components include:
	 * - 'title'
	 * - 'output'
	 * - 'onload'
	 * - 'redir'
	 */
	protected $page = array('content' => '');
	
	/**
	 * @var mixed Coordinates of the request, as parsed by the route.  By bare minimum, this should always contain:
	 * - 'controller'
	 * - 'action'
	 */
	protected $coordinates;

	/**
	 * Begins controller execution and catches exceptions
	 */
	public function start ($coordinates) {
		$this->coordinates = $coordinates;
		try {
			// call_user_func does not pass by reference in PHP4 - the call-time pass by reference is required. This is E_STRICT safe
			call_user_func(array(&$this, $coordinates['action']), $coordinates);
		} catch (BaseRowRecordNotFoundException $e) {
			$this->httpStatus(404);
			$this->page['content'] .= $this->error($e->getMessage());
		} catch (Exception $e) {
			if (!$e instanceof ErrorException) error_log($e); // Log any exceptions not generated by the ChitinErrorHandler
			$this->httpStatus(500);
			if ($_ENV['SERVER_ENV'] == 'development')
				$this->page['content'] .= $this->error("An error occurred processing your request:<pre>$e</pre>");
			else
				$this->page['content'] .= $this->error("An error occurred processing your request.");
		}
	}

	public function getPage () {
		return $this->page;
	}
	
	/**
	 * Returns rows from model and the HTML for a pager
	 *
	 * Example invocation:
	 * list($rows, $pager) = $this->paginate($something_model, 'active = 1')
	 *
	 * @param mixed $model_class_name Instance of BaseRow (e.g. PersonTable()), a scope (e.g. PersonTable()->scope('...')), or string of the BaseRow class name
	 * @param string $clause Where clause to be fed to BaseRow::find and BaseRow::rowCount
	 * @return array [0] => array of rows, [1] => HTML for pager
	 */
	protected function paginate ($model_class_name, $clause = null, $params = array()) {
		$model = ($model_class_name instanceof BaseRow) ? $model_class_name : new $model_class_name;
		
		$pager = new ChitinPager($GLOBALS['config']['pager']);
		$rows = $model->scope($pager->getScope())->find(array(
			'where' => $clause,
			'params' => $params,
			));

		return array($rows, $pager->getOutput($model->rowCount($clause, $params)));
	}
	
	/**
	 * Display an error message to the browser
	 *
	 * This overwrites what is currently in the $page['content'] variable
	 *
	 * @deprecated
	 * @param string $message Error message to display
	 * @return string HTML output
	 */
	protected function error ($message) {
		return ErrorHelper::message($message);
	}
	
	/**
	 * Display a list of error messages
	 *
	 * @deprecated
	 * @param array $list Flat array of error messages
	 * @return string HTML output
	 */
	protected function errorList ($list) {
		return ErrorHelper::index($list);
	}
	
	/**
	 * Redirect to a browser via HTTP to a new URL, and stop execution of current page
	 *
	 * If $path is relative, it will be relative to the PathToRoot() for the site
	 *
	 * @param string $path Location to redirct to
	 */
	protected function redirect ($path) {
		ChitinLogger::log("Redirect: $path");
		ChitinLogger::flush();
		header("Location: " . (((strlen($path) > 0 && $path[0] == '/') || strpos($path, '://') !== false) ? '' : PathToRoot::get()) . $path);
		die();
	}
	
	/**
	 * Send a non-default HTTP status code with this request
	 *
	 * By default, status code "200" will always be sent by PHP
	 *
	 * @param integer $code HTTP status code used, e.g. 404
	 */
	protected function httpStatus ($code) {
		$status_codes = (array(
			100 => '100 Continue',
			101 => '101 Switching Protocols',
			102 => '102 Processing',
			200 => '200 OK',
			201 => '201 Created',
			202 => '202 Accepted',
			203 => '203 Non-Authoritative Information',
			204 => '204 No Content',
			205 => '205 Reset Content',
			206 => '206 Partial Content',
			207 => '207 Multi-Status',
			300 => '300 Multiple Choices',
			301 => '301 Moved Permanently',
			302 => '302 Found',
			303 => '303 See Other',
			304 => '304 Not Modified',
			305 => '305 Use Proxy',
			306 => '306 (Unused)',
			307 => '307 Temporary Redirect',
			400 => '400 Bad Request',
			401 => '401 Unauthorized',
			402 => '402 Payment Granted',
			403 => '403 Forbidden',
			404 => '404 File Not Found',
			405 => '405 Method Not Allowed',
			406 => '406 Not Acceptable',
			407 => '407 Proxy Authentication Required',
			408 => '408 Request Time-out',
			409 => '409 Conflict',
			410 => '410 Gone',
			411 => '411 Length Required',
			412 => '412 Precondition Failed',
			413 => '413 Request Entity Too Large',
			414 => '414 Request-URI Too Large',
			415 => '415 Unsupported Media Type',
			416 => '416 Requested range not satisfiable',
			417 => '417 Expectation Failed',
			422 => '422 Unprocessable Entity',
			423 => '423 Locked',
			424 => '424 Failed Dependency',
			500 => '500 Internal Server Error',
			501 => '501 Not Implemented',
			502 => '502 Bad Gateway',
			503 => '503 Service Unavailable',
			504 => '504 Gateway Time-out',
			505 => '505 HTTP Version not supported',
			507 => '507 Insufficient Storage',
		));
		
		$code = intval($code);
		
		if (!isset($status_codes))
			return; // should we throw an exception maybe?
		
		else
			header('HTTP/1.1 ' . $status_codes[$code]);
		
		ChitinLogger::log('HTTP/1.1 ' . $status_codes[$code]);
	}
	
	/**
	 * Tells the browser that any following content should be saved as a file with $filename
	 *
	 * This method should be called before content is sent (as it sets headers),
	 * and your controller should die() after the content is sent to prevent the
	 * layout from rendering.
	 *
	 * Usage:
	 * $this->download('myfile.txt');
	 * readfile('/some/path');
	 * die();
	 *
	 * @param string $filename
	 */
	protected function download ($filename) {
		$this->page['layout'] = false;
		
		ChitinLogger::log("Download: $filename");
		
		header("Content-Type: application/octet-stream; name=\"$filename\"");
		header("Content-Disposition: attachment; filename=\"$filename\"");

		// These are required for IE
		header("Pragma: private");
		header("Cache-Control: private, must-revalidate, post-check=0, pre-check=0");
	}
	
	/**
	 * Render a template from object variables
	 * @param mixed $options
	 * - 'file' Template path to render; default: $controller/$action.php
	 * - 'controller'; default: $this->coordinates['controller']
	 * - 'action' Action's template to render; default: $this->coordinates['action']
	 * - 'locals' Associative array of variables to render in the template; default: this controller's public object variables, from get_object_vars($this)
	 */
	protected function render ($options = array()) {
		if (!isset($options['controller'])) $options['controller'] = $this->coordinates['controller'];
		if (!isset($options['action']))     $options['action'] = $this->coordinates['action'];
		if (!isset($options['file']))       $options['file'] = $options['controller'] . '/' . $options['action'] . '.php';
		if (!isset($options['locals']))     $options['locals'] = get_object_vars($this);
		
		$view = new TemplateView($options['file']);
		$view->assignArray($options['locals']);
		$this->page['content'] .= $view->getOutput();
	}
}
?>